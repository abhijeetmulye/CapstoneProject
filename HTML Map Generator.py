

###############################################################################################################################################################


This Code creates an HTML file displaying a world map with Kickstarter projects FROM A PARTICULAR YEAR mapped onto it using the FOLIUM api for python. 

Projects are categorised based on sets defined in "categories.json", with color coded points denoting projects of each category
Refer to Check_Category() for more information on sets and color mapping

Map Generator uses two input files: (find in .\data)

						a) Latitude_Longitude_ALL.json

						b) scraper.json


Map Generator will Output Two files (path:.\Maps):
						a) [Tags][year]<Map_User_Given_Name>.html:
														HTML File Generated by FOLIUM

						b) <Error_Log_for_User_Given_Name_Map>.html
														List of Project_IDs not counted in map

Features:

1) TOGGLE successful/unsuccessful filter
2) TOGGLE Category mapping
3) Select Year of Mapping
4) Error_Log maintained that lists keys skipped (Problem_Nodes), number of keys skipped in total (from all years), number of points plotted on the map, total number of projects
   that have the year and category requested
###############################################################################################################################################################


"""


import json
import folium
import unicodedata
import time

print "Loading Files......."
Coordinate_List = json.load(open("data\Latitude_Longitude_ALL.json"))
Projects = json.load(open("data\scraper.json"))

print "Load Complete."
Project_IDs = Projects.keys()

#Get File Name to write from User
_file_ = raw_input("\n\n\nEnter filename to create (.html) :")

#Get Project Count to Consider from User
_count_ = raw_input('\n\nNumber of data points to consider(max 105598):')

#Get year to consider
_year_  = int(raw_input('\n\n\n\nWhich Year to consider? (2009 onwards):'))

#Get Whether Needed to Ignore categories or not

while 1:

	_catignore_ = int(raw_input('\n\n\n\nIgnore categories? (Press 1 for yes,0 otherwise):'))
	if (_catignore_==1):
		Cat_Tag = "[CatIgnoreOn]"
		break
	else:
		if (_catignore_==0):
			Cat_Tag = "[CatIgnoreOff]"
			break
		else:
			print "\n\nError in category selection, please enter either 1 or 0 only"
			continue

#Get whether to Ignore unsuccesful projects or not

while 1:

	_successcheck_ = int(raw_input('\n\n\n\nFilter unsuccessful projects? (Press 1 for yes,0 otherwise):'))
	if (_successcheck_==1):
		Success_Tag = "[FilterSuccessOn]"
		break
	else:
		if (_successcheck_==0):
			Success_Tag = "[FilterSuccessOff]"
			break
		else:
			print "\n\nError in success filter selection, please enter either 1 or 0 only"
			continue

#Create Error Log to store ALL project ID's omitted from a particular map
Error_Log = open("Maps\\"+Cat_Tag+Success_Tag+"["+str(_year_)+"]Error_Log_"+_file_+".dat",'w')
Error_Log.write("Error Update at " + time.strftime("%H:%M:%S") + " for file:"+_file_)
Errors = []
#counter for problems in reading points (count of points with missing data such as "name","state","coordinate","category","Launch_year")
Problem_Nodes = 0


# Function to Check and return the category of a certain project given the project ID
# Categories have to be hard coded and divided by hand into sets
# Returns Color and Category

def Check_Category(Project_ID):


	###  Code Block for declaring the Categories lists

	Categories = ["Jazz", "Metal", "Publishing", "Performance Art", "Rock", "Poetry", "Fiction", "Classical Music", "Animation", "Music", "Art Book", "Digital Art", "Indie Rock", "Food", "Painting", "Photography", "Video Games", "Illustration", "Public Art", "Country & Folk", "Narrative Film", "Electronic Music", "Conceptual Art", "Theater", "Comics", "Webseries", "Journalism", "Graphic Design", "Short Film", "Product Design", "Games", "Children's Book", "World Music", "Crafts", "Documentary", "Tabletop Games", "Hip-Hop", "Film & Video", "Open Software", "Fashion", "Art", "Dance", "Pop", "Hardware", "Radio & Podcast", "Design", "Nonfiction", "Periodical", "Sculpture", "Mixed Media", "Technology"]
	Music = []#"Music","Radio & Podcast","Jazz", "Metal","Rock","Classical Music","Indie Rock","Country & Folk","Electronic Music","World Music","Hip-Hop","Pop"]
	Writing = []#"Publishing","Poetry","Fiction","Classical","Comics","Webseries","Journalism","Children's Book","Nonfiction","Periodical"]
	Art = []#"Sculpture","Performance Art","Art Book","Digital Art","Painting","Photography","Illustration","Public Art","Conceptual Art","Graphic Design","Product Design","Crafts","Art","Design","Fashion"]
	Film = []#"Animation","Photography","Narrative Film","Theater","Short Film","Documentary","Film & Video","Mixed Media"]
	Technology = ["Hardware","Open Software","Technology"]
	Dance = []#"Dance"]
	Food = []#"Food"]
	Games = ["Tabletop Games","Games","Video Games"]
	


	a=0


	#TO TEST WHETHER YOU MISSED OUT ANYTHING OR NOT:
	
	"""print set(Categories) - set(Music + Writing + Art + Film + Food + Technology + Dance + Games)"""
	


	#Block for catching when a project does not have a category, or a category name:

	try:
		a = unicodedata.normalize('NFKD',Projects[Project_ID]['category']['name']).encode('ascii','ignore')
	except KeyError:
		a = 'Unfiled_Error'		#Give "Unfiled if cannot find filing"
		Error_Log.write("\n\nCaught KeyError in the Check_Category Function when ID was")
		Error_Log.write(Project_ID)
		
		
	except Exception:
		a = 'Unfiled_Error'
		Error_Log.write("\n\nCaught Unknown Error in the Check_Category Function when ID was")
		Error_Log.write(Project_ID)
		

	
	#IF Block to check

	if a in Music:
		return "#FF0000",a 		#RED FOR MUSIC
	if a in Writing: 
		return "#00FF00",a  	#GREEN FOR WRITING
	if a in Art:
		return "#FFFF00",a   	#YELLOW FOR ART
	if a in Film:
		return "#00FFFF",a  	#LIGHT_BLUE FOR Film
	if a in Technology:
		return "#0000FF",a 		#BLUE FOR TECH
	if a in Dance:
		return "#C0C0C0",a 		#GREY FOR DANCE
	if a in Food:
		return "#FFFFFF",a     	#WHITE FOR FOOD
	if a in Games:
		return "#009966",a 		#Teal Green for Games
	if a == 'Unfiled_Error':
		return "#000000",'Unfiled_Error' #BLACK FOR UNFILED

	return "#000000","Not Found"		#Return Unfiled if project category exists in none




"""Function to create a Map and fill it with a defined number of points, based on the category"""


def Create_Map_Categories(filename,count):
	
	

	Map = folium.Map(location=[0,0],zoom_start=2, width = 1366, height = 700)
	counter = 0
	Total_Checked = 0
	#Flag for whether to filter out unsuccessful projects (1 = FILTER ON)
	
	SUCCESS_COUNTER = 0
	Problem_Nodes = 0
	# Loop through a limited number of Project_IDs and pinpoint on map. Display Name, Status
	for key in Project_IDs:
		counter = counter + 1
		size = Projects[key]['backers_count'] * 10

		if counter>int(count):
			break
		
		#Flags for Errors Detected in Name, Status, Coordinate (Such as not-found/found), Category and Year retrieval 
		Name_Error = 0
		Status_Error = 0
		Coordinate_Error = 0
		Category_Error = 0
		Time_Error = 0
		
		
		
		

		#Check for Errors in Project Name retrieval and print to Error_Log_file_.dat
		try:
			Name = unicodedata.normalize('NFKD',Projects[key]['name']).encode('ascii','ignore').replace('"',"")
		except Exception as e:
			Name_Error = 1
			print "caught"
		except KeyError:
			Name_Error = 1
			Error_Log.write("\n\nCaught Key Error in name for Project ID")
			Error_Log.write(key)
			


		#Check for Error in Project Status Retrieval (Will not plot any points that have undefined status, even if we're not checking for status)
		try:
			Status = unicodedata.normalize('NFKD',Projects[key]['state']).encode('ascii','ignore')
		except Exception:
			Status_Error = 1
		except KeyError:
			Status_Error = 1
			Error_Log.write("\n\nCaught KeyError on the Status")
			Error_Log.write(key)
		
		#create flag telling that successfilter changed Status_Error

		success_filter_error = 0
		#code that sets Status_Error flag to 1 if project is not successful 
		if Status_Error == 0:
			if (_successcheck_==1)&(Status!='successful'):
				
				Status_Error = 1

		#code for extracting year
		try:
			Launch_Year = time.gmtime(Projects[key]['launched_at'])[0] 			#gmtime converts date/time stamp given in epoch format to a struct containing dates and time
		except Exception:
			Time_Error = 1
			Time_Error = 1
			Launch_Year = -1
			Error_Log.write("\n\nCaught Unknown error on the Launch Time/Date")
			Error_Log.write(key)
			
		except KeyError:
			Time_Error = 1
			Error_Log.write("\n\nCaught KeyError on the Launch Time/Date")
			Error_Log.write(key)
			
			Launch_Year = -1

		

		#Check for Coordinate Errors
		if Coordinate_List[key]['ERROR']==True:
			Coordinate_Error = 1
			Error_Log.write("\n\nCaught KeyError on the Coordinate_List for P_ID: ")
			Error_Log.write(key)
			Error_Log.write("\n")
			Error_Log.write(json.dumps(Coordinate_List[key]))
			
		
		

			#flag for redundancy check

		redundancy = 0


		Color,Category = Check_Category(key)

		

		#Don't plot a point if it does not have a category, or it does not fall in the categories we want to show. This is done only when categories are
		#active
		
		if (Category == 'Unfiled_Error')&(_catignore_==0):
			print "Unfiled_Error"
			print key
			Category_Error = 1
			Problem_Nodes  = Problem_Nodes + 1
			redundancy = 1
		
		if (Category == 'Not Found')&(_catignore_==0):		# if it's not found, then it's not a read error. It's just that the project does not lie in the category we're looking for
			#print "Category Not Found"
			Category_Error = 1
			
			
		
		#Increase count of project IDs checked for that year (error keeping). Projects with KeyErrors in "Launched_at" are automatically removed and so are projects
		#that do not fall in the category. Only active when catignore is 0
		


		if (Launch_Year == _year_)&(Category_Error==0):			#Total projects checked that have your required category(ies) and year
			Total_Checked = Total_Checked + 1

		#Total_Checked = Total (from 105598 projects) that have the same year and no category problems


		#Increase counter for errors caught from all projects (number of project id's that have errors in atleast one key being searched out of Name, Category, Status, Coordinate and Time)
		if  (Name_Error == 1) | (Coordinate_Error==1)| (Status_Error == 1) |(Time_Error==1):		#Category_Error already accounted for in Check_Category()
			
			Problem_Nodes = Problem_Nodes + 1
			if redundancy==1 :
				print key
				Problem_Nodes = Problem_Nodes - 1 		#if you already counted this in category error don't increment the pointer again
	
	
			#Add to list
			Errors.append(key)





		#If No Errors found, plot point on map with Project Name, ID and Category in the appropriate color returned from Check_Category
		if (Name_Error == 0) & (Category_Error==0) & (Status_Error == 0) & (Coordinate_Error==0) & (_catignore_== 0) &(Time_Error==0) &(Launch_Year == _year_):
	
			popup = "Project_Name: {0},Project_ID: {1},Project_Category: {2},Project_Status: {3}".format(Name,key,Category,Status)
			Map.circle_marker(location=[Coordinate_List[key]['lat'],Coordinate_List[key]['lng']], popup = popup,radius=size, fill_color=Color)

			#increase number of plotted points as required (_catignore_ and _year_) based
			SUCCESS_COUNTER  = SUCCESS_COUNTER + 1
		

		#If categories are to be ignored
		if (Name_Error == 0) & (Status_Error == 0) & (Coordinate_Error==0) & (_catignore_== 1) &(Time_Error==0)&(Launch_Year == _year_):
			
			popup = "Project_Name: {0},Project_ID: {1},Project_Status: {2}".format(Name,key,Status)
			Map.circle_marker(location=[Coordinate_List[key]['lat'],Coordinate_List[key]['lng']], popup = popup,radius=size, fill_color="#f00")
			
			#increase number of plotted points as required (_catignore_ and _year_) based
			SUCCESS_COUNTER  = SUCCESS_COUNTER + 1
	

	print SUCCESS_COUNTER 

	print "out of\n"
	print Total_Checked

	print "Total Records With Problems =", str(Problem_Nodes)

	#Write Error Log
	Error_Log.write("""\n\n\n\n####################################################################################


RESULTS:

Problem_Nodes =""" + str(Problem_Nodes) + "\n\n\n\n\n\n" + "Points Covered in year"+str(_year_) + " = "+ str(SUCCESS_COUNTER) +"/"+str(Total_Checked)+"\n\n\n\nProblem Keys: " + str(Errors) + """\n\n####################################################################################""")


	print "\n\n\n\n"+_file_+" written to Folder \"Maps\"\n\n\n"


	#Create Map


	Map.create_map(filename)

	Error_Log.close()



#Appending Options Active to FileName

if _catignore_ == 1:
	_file_ = "[CatIgnoreOn]"+Success_Tag+"["+str(_year_)+"]"+ _file_
else:
	_file_ = "[CatIgnoreOff]"+Success_Tag+"["+str(_year_)+"]"+ _file_



#Function Call to Map Creation

Create_Map_Categories(filename=("Maps\\"+_file_),count=_count_)



#Optional Code to launch process

import subprocess
subprocess.call(['C:\Program Files (x86)\Google\Chrome\Application\chrome.exe','Maps\\'+_file_])